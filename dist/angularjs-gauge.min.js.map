{"version":3,"sources":["angularjs-gauge.js"],"names":["angular","gaugeMeterProviderFn","defaultOptions","size","value","undefined","cap","thick","type","foregroundColor","backgroundColor","this","setOptions","options","Error","merge","customOptions","ngGauge","getOptions","extend","$get","gaugeMeterDirective","tpl","Gauge","element","find","text","legend","unit","context","getContext","init","prototype","setupStyles","create","canvas","width","height","lineCap","lineWidth","lfs","llh","css","display","fontWeight","position","textAlign","overflow","textOverflow","fontSize","lineHeight","textDecoration","fs","lh","parseInt","animate","requestID","window","requestAnimationFrame","head","tail","beginPath","newPos","movePerFrame","arc","center","x","y","radius","strokeStyle","stroke","cancelAnimationFrame","getType","bounds","getBounds","getCenter","getValue","getRadius","getForegroundColor","distance","drawShell","Math","PI","start","end","clear","clearRect","getWidth","getHeight","update","destroy","getThickness","val","used","total","getBackgroundColor","getLineCap","restrict","replace","template","scope","append","label","prepend","link","watchData","nv","ov","gauge","equals","watchOther","defaults","console","log","isDefined","$watch","$on","module","directive","provider","$inject"],"mappings":";;;;;;;;;CAAA,SAAAA,GACA,YAOA,SAAAC,KACA,GAAAC,IACAC,KAAA,IACAC,MAAAC,OACAC,IAAA,OACAC,MAAA,EACAC,KAAA,OACAC,gBAAA,UACAC,gBAAA,OAGAC,MAAAC,WAAA,SAAAC,GACA,IAAAA,GAAA,gBAAAA,GACA,KAAA,IAAAC,OAAA,uDACAZ,GAAAF,EAAAe,MAAAb,EAAAc,eAGA,IAAAC,IACAC,WAAA,WACA,MAAAlB,GAAAmB,UAAAjB,IAIAS,MAAAS,KAAA,WACA,MAAAH,IAOA,QAAAI,GAAAJ,GAEA,GAAAK,GAAA,oKAEAC,EAAA,SAAAC,EAAAX,GACAF,KAAAa,QAAAA,EAAAC,KAAA,UAAA,GACAd,KAAAe,KAAAF,EAAAC,KAAA,QACAd,KAAAgB,OAAAH,EAAAC,KAAA,KACAd,KAAAiB,KAAAJ,EAAAC,KAAA,KACAd,KAAAkB,QAAAlB,KAAAa,QAAAM,WAAA,MACAnB,KAAAE,QAAAA,EACAF,KAAAoB,OA6LA,OA1LAR,GAAAS,WAEAD,KAAA,WACApB,KAAAsB,cACAtB,KAAAuB,UAGAD,YAAA,WAEAtB,KAAAkB,QAAAM,OAAAC,MAAAzB,KAAAE,QAAAV,KACAQ,KAAAkB,QAAAM,OAAAE,OAAA1B,KAAAE,QAAAV,KACAQ,KAAAkB,QAAAS,QAAA3B,KAAAE,QAAAP,IACAK,KAAAkB,QAAAU,UAAA5B,KAAAE,QAAAN,KAEA,IAAAiC,GAAA,IAAA7B,KAAAE,QAAAV,KACAsC,EAAA9B,KAAAE,QAAAV,IAEAQ,MAAAe,KAAAgB,KACAC,QAAA,eACAC,WAAA,IACAR,MAAA,OACAS,SAAA,WAEAC,UAAA,SACAC,SAAA,SACAC,aAAA,WACAC,SAAAT,EAAA,KACAU,WAAAT,EAAA,OAGA9B,KAAAiB,KAAAc,KACAS,eAAA,OACAF,SAAA,QACAL,WAAA,KAGA,IAAAQ,GAAAzC,KAAAE,QAAAV,KAAA,GACAkD,EAAA,EAAAD,EAAAE,SAAA3C,KAAAE,QAAAV,KAEAQ,MAAAgB,OAAAe,KACAC,QAAA,eACAP,MAAA,OACAS,SAAA,WAEAC,UAAA,SACAC,SAAA,SACAC,aAAA,WACAJ,WAAA,IACAK,SAAAG,EAAA,KACAF,WAAAG,EAAA,QAGAnB,OAAA,WAkBA,QAAAqB,KAGA,GAFAC,EAAAC,OAAAC,sBAAAH,GAEAI,GAAAC,EAAA,CACA/B,EAAAgC,WACA,IAAAC,GAAAH,EAAA,EAAAI,CACAlC,GAAAmC,IAAAC,EAAAC,EAAAD,EAAAE,EAAAC,EAAAT,EAAAG,GAAA,GACAjC,EAAAwC,YAAA5D,EACAoB,EAAAyC,SACAX,EAAAG,MAEAS,sBAAAf,GA3BA,GAQAA,GARAhD,EAAAG,KAAA6D,UACAC,EAAA9D,KAAA+D,UAAAlE,GACAuD,EAAA,YACAE,EAAAtD,KAAAgE,YACA9C,EAAAlB,KAAAkB,QACAzB,EAAAO,KAAAiE,WACAR,EAAAzD,KAAAkE,YACApE,EAAAE,KAAAmE,qBAEAnB,EAAAc,EAAAd,KACAC,EAAAa,EAAAb,KACAmB,EAAAnB,EAAAD,CAEAhD,MAAAqE,UAAArB,EAAAC,GACAA,EAAAD,EAAAoB,EAAA3E,EAAA,IAgBAmD,KAGAmB,UAAA,SAAAlE,GACA,GAAAmD,GAAAC,CAYA,OAXA,QAAApD,GACAmD,EAAAsB,KAAAC,GACAtB,EAAA,EAAAqB,KAAAC,IACA,QAAA1E,GACAmD,EAAA,IAAAsB,KAAAC,GACAtB,EAAA,IAAAqB,KAAAC,IACA,SAAA1E,IACAmD,EAAA,GAAAsB,KAAAC,GACAtB,EAAA,IAAAqB,KAAAC,KAIAvB,KAAAA,EACAC,KAAAA,IAKAoB,UAAA,SAAAG,EAAAC,GACA,GAAAvD,GAAAlB,KAAAkB,QACAoC,EAAAtD,KAAAgE,YACAP,EAAAzD,KAAAkE,WACAhD,GAAAgC,YACAhC,EAAAmC,IAAAC,EAAAC,EAAAD,EAAAE,EAAAC,EAAAe,EAAAC,GAAA,GACAvD,EAAAwC,YAAA1D,KAAAE,QAAAH,gBACAmB,EAAAyC,UAGAe,MAAA,WACA1E,KAAAkB,QAAAyD,UAAA,EAAA,EAAA3E,KAAA4E,WAAA5E,KAAA6E,cAGAC,OAAA,WACA9E,KAAA0E,QACA1E,KAAAuB,UAGAwD,QAAA,WACA/E,KAAA0E,SAGAR,UAAA,WACA,GAAAZ,GAAAtD,KAAAgE,WACA,OAAAV,GAAAC,EAAAvD,KAAAgF,gBAGAhB,UAAA,WACA,GAAAT,GAAAvD,KAAA4E,WAAA,EACApB,EAAAxD,KAAA6E,YAAA,CACA,QACAtB,EAAAA,EACAC,EAAAA,IAIAS,SAAA,WACA,GAAAgB,GAAA,CAOA,OANAjF,MAAAE,QAAAgF,MAAAlF,KAAAE,QAAAiF,OACAF,EAAAjF,KAAAE,QAAAgF,KAAAlF,KAAAE,QAAAiF,MAAA,IACAnF,KAAAE,QAAAT,MAAAO,KAAAE,QAAAgF,MAEAD,EAAAjF,KAAAE,QAAAT,MAEAwF,GAGAL,SAAA,WACA,MAAA5E,MAAAkB,QAAAM,OAAAC,OAGAoD,UAAA,WACA,MAAA7E,MAAAkB,QAAAM,OAAAE,QAGAsD,aAAA,WACA,MAAAhF,MAAAE,QAAAN,OAGAwF,mBAAA,WACA,MAAApF,MAAAE,QAAAH,iBAGAoE,mBAAA,WACA,MAAAnE,MAAAE,QAAAJ,iBAGAuF,WAAA,WACA,MAAArF,MAAAE,QAAAP,KAGAkE,QAAA,WACA,MAAA7D,MAAAE,QAAAL,QAOAyF,SAAA,IACAC,SAAA,EACAC,SAAA7E,EACA8E,OACAC,OAAA,KACA3F,gBAAA,KACAJ,IAAA,KACAG,gBAAA,KACA6F,MAAA,KACAC,QAAA,KACApG,KAAA,KACAI,MAAA,KACAC,KAAA,KACAJ,MAAA,KACAyF,KAAA,KACAC,MAAA,MAGAU,KAAA,SAAAJ,EAAA5E,GA2BA,QAAAiF,GAAAC,EAAAC,GACAC,GACAF,IAAA1G,EAAA6G,OAAAH,EAAAC,IACAC,EAAAnB,SAGA,QAAAqB,GAAAJ,EAAAC,GACAC,GACAF,IAAA1G,EAAA6G,OAAAH,EAAAC,KACAC,EAAAlB,UACAkB,EAAA7E,QApCA,GAAAgF,GAAA9F,EAAAC,YACA8F,SAAAC,IAAA,qBAAAF,GACAX,EAAAhG,MAAAJ,EAAAkH,UAAAd,EAAAhG,OAAAgG,EAAAhG,MAAA2G,EAAA3G,MACAgG,EAAAjG,KAAAH,EAAAkH,UAAAd,EAAAjG,MAAAiG,EAAAjG,KAAA4G,EAAA5G,KACAiG,EAAA9F,IAAAN,EAAAkH,UAAAd,EAAA9F,KAAA8F,EAAA9F,IAAAyG,EAAAzG,IACA8F,EAAA7F,MAAAP,EAAAkH,UAAAd,EAAA7F,OAAA6F,EAAA7F,MAAAwG,EAAAxG,MACA6F,EAAA5F,KAAAR,EAAAkH,UAAAd,EAAA5F,MAAA4F,EAAA5F,KAAAuG,EAAAvG,KACA4F,EAAA3F,gBAAAT,EAAAkH,UAAAd,EAAA3F,iBAAA2F,EAAA3F,gBAAAsG,EAAAtG,gBACA2F,EAAA1F,gBAAAV,EAAAkH,UAAAd,EAAA1F,iBAAA0F,EAAA1F,gBAAAqG,EAAArG,gBAEAsG,QAAAC,IAAAF,EAAAX,EACA,IAAAQ,GAAA,GAAArF,GAAAC,EAAA4E,EAEAA,GAAAe,OAAA,QAAAV,GAAA,GACAL,EAAAe,OAAA,OAAAV,GAAA,GACAL,EAAAe,OAAA,QAAAV,GAAA,GACAL,EAAAe,OAAA,MAAAL,GAAA,GACAV,EAAAe,OAAA,QAAAL,GAAA,GACAV,EAAAe,OAAA,OAAAL,GAAA,GACAV,EAAAe,OAAA,OAAAL,GAAA,GACAV,EAAAe,OAAA,kBAAAL,GAAA,GACAV,EAAAe,OAAA,kBAAAL,GAAA,GAEAV,EAAAgB,IAAA,WAAA,cACAhB,EAAAgB,IAAA,UAAA,gBAzRApH,EACAqH,OAAA,sBACAC,UAAA,UAAAjG,GACAkG,SAAA,UAAAtH,GAEAA,EAAAuH,WA8BAnG,EAAAmG,SAAA,YAwQAxH","file":"angularjs-gauge.min.js","sourcesContent":["(function (angular) {\r\n    'use strict';\r\n    angular\r\n        .module('angularjs-gauge', [])\r\n        .directive('ngGauge', gaugeMeterDirective)\r\n        .provider('ngGauge', gaugeMeterProviderFn);\r\n\r\n    gaugeMeterProviderFn.$inject = [];\r\n    function gaugeMeterProviderFn() {\r\n        var defaultOptions = {\r\n            size: 200,\r\n            value: undefined,\r\n            cap: 'butt',\r\n            thick: 2,\r\n            type: 'full',\r\n            foregroundColor: '#FFCC66',\r\n            backgroundColor: '#CCC'\r\n        };\r\n\r\n        this.setOptions = function (options) {\r\n            if (!(options && typeof options === 'object'))\r\n                throw new Error('Invalid option type specified in the ngGaugeProvider');\r\n            defaultOptions = angular.merge(defaultOptions, customOptions);\r\n        }\r\n\r\n        var ngGauge = {\r\n            getOptions: function () {\r\n                return angular.extend({}, defaultOptions)\r\n            }\r\n        };\r\n\r\n        this.$get = function () {\r\n            return ngGauge;\r\n        }\r\n\r\n    }\r\n\r\n    gaugeMeterDirective.$inject = ['ngGauge'];\r\n\r\n    function gaugeMeterDirective(ngGauge) {\r\n\r\n        var tpl = '<div style=\"display:inline;text-align:center;position:relative;\"><span><u>{{prepend}}</u>{{value}}<u>{{append}}</u></span><b>{{label}}</b><canvas></canvas></div>';\r\n\r\n        var Gauge = function (element, options) {\r\n            this.element = element.find('canvas')[0];\r\n            this.text = element.find('span');\r\n            this.legend = element.find('b');\r\n            this.unit = element.find('u');\r\n            this.context = this.element.getContext('2d');\r\n            this.options = options;\r\n            this.init();\r\n        };\r\n\r\n        Gauge.prototype = {\r\n\r\n            init: function () {\r\n                this.setupStyles();\r\n                this.create();\r\n            },\r\n\r\n            setupStyles: function () {\r\n\r\n                this.context.canvas.width = this.options.size;\r\n                this.context.canvas.height = this.options.size;\r\n                this.context.lineCap = this.options.cap;\r\n                this.context.lineWidth = this.options.thick;\r\n\r\n                var lfs = this.options.size * 0.22,\r\n                    llh = this.options.size;\r\n\r\n                this.text.css({\r\n                    display: 'inline-block',\r\n                    fontWeight: 100,\r\n                    width: '100%',\r\n                    position: 'absolute',\r\n                    // fontFamily: 'Open Sans',\r\n                    textAlign: 'center',\r\n                    overflow: 'hidden',\r\n                    textOverflow: 'ellipsis',\r\n                    fontSize: lfs + 'px',\r\n                    lineHeight: llh + 'px'\r\n                });\r\n\r\n                this.unit.css({\r\n                    textDecoration: 'none',\r\n                    fontSize: '0.6em',\r\n                    fontWeight: 200\r\n                });\r\n\r\n                var fs = this.options.size / 13;\r\n                var lh = (5 * fs) + parseInt(this.options.size);\r\n\r\n                this.legend.css({\r\n                    display: 'inline-block',\r\n                    width: '100%',\r\n                    position: 'absolute',\r\n                    // fontFamily: 'Open Sans',\r\n                    textAlign: 'center',\r\n                    overflow: 'hidden',\r\n                    textOverflow: 'ellipsis',\r\n                    fontWeight: 200,\r\n                    fontSize: fs + 'px',\r\n                    lineHeight: lh + 'px'\r\n                });\r\n            },\r\n            create: function () {\r\n\r\n                var type = this.getType(),\r\n                    bounds = this.getBounds(type),\r\n                    movePerFrame = 0.0174532925,\r\n                    center = this.getCenter(),\r\n                    context = this.context,\r\n                    value = this.getValue(),\r\n                    radius = this.getRadius(),\r\n                    foregroundColor = this.getForegroundColor(),\r\n                    requestID,\r\n                    head = bounds.head,\r\n                    tail = bounds.tail,\r\n                    distance = tail - head;\r\n\r\n                this.drawShell(head, tail);\r\n                tail = head + (distance * value) / 100;\r\n\r\n                function animate() {\r\n                    requestID = window.requestAnimationFrame(animate);\r\n\r\n                    if (head <= tail) {\r\n                        context.beginPath();\r\n                        var newPos = head + 2 * movePerFrame;\r\n                        context.arc(center.x, center.y, radius, head, newPos, false);\r\n                        context.strokeStyle = foregroundColor;\r\n                        context.stroke();\r\n                        head = newPos;\r\n                    } else {\r\n                        cancelAnimationFrame(requestID);\r\n                    }\r\n                }\r\n                animate();\r\n            },\r\n\r\n            getBounds: function (type) {\r\n                var head, tail;\r\n                if (type == 'semi') {\r\n                    head = Math.PI;\r\n                    tail = 2 * Math.PI;\r\n                } else if (type == 'full') {\r\n                    head = 1.5 * Math.PI;\r\n                    tail = 3.5 * Math.PI;\r\n                } else if (type === 'arch') {\r\n                    head = 0.8 * Math.PI;\r\n                    tail = 2.2 * Math.PI;\r\n                }\r\n\r\n                return {\r\n                    head: head,\r\n                    tail: tail\r\n                };\r\n\r\n            },\r\n\r\n            drawShell: function (start, end) {\r\n                var context = this.context,\r\n                    center = this.getCenter(),\r\n                    radius = this.getRadius();\r\n                context.beginPath();\r\n                context.arc(center.x, center.y, radius, start, end, false);\r\n                context.strokeStyle = this.options.backgroundColor;\r\n                context.stroke();\r\n            },\r\n\r\n            clear: function () {\r\n                this.context.clearRect(0, 0, this.getWidth(), this.getHeight());\r\n            },\r\n\r\n            update: function () {\r\n                this.clear();\r\n                this.create();\r\n            },\r\n\r\n            destroy: function () {\r\n                this.clear();\r\n            },\r\n\r\n            getRadius: function () {\r\n                var center = this.getCenter();\r\n                return center.x - this.getThickness();\r\n            },\r\n\r\n            getCenter: function () {\r\n                var x = this.getWidth() / 2,\r\n                    y = this.getHeight() / 2;\r\n                return {\r\n                    x: x,\r\n                    y: y\r\n                };\r\n            },\r\n\r\n            getValue: function () {\r\n                var val = 0;\r\n                if (this.options.used && this.options.total) {\r\n                    val = (this.options.used / this.options.total) * 100;\r\n                    this.options.value = this.options.used;\r\n                } else {\r\n                    val = this.options.value;\r\n                }\r\n                return val;\r\n\r\n            },\r\n            getWidth: function () {\r\n                return this.context.canvas.width;\r\n            },\r\n\r\n            getHeight: function () {\r\n                return this.context.canvas.height;\r\n            },\r\n\r\n            getThickness: function () {\r\n                return this.options.thick;\r\n            },\r\n\r\n            getBackgroundColor: function () {\r\n                return this.options.backgroundColor;\r\n            },\r\n\r\n            getForegroundColor: function () {\r\n                return this.options.foregroundColor;\r\n            },\r\n\r\n            getLineCap: function () {\r\n                return this.options.cap;\r\n            },\r\n\r\n            getType: function () {\r\n                return this.options.type;\r\n            }\r\n\r\n        };\r\n\r\n\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            template: tpl,\r\n            scope: {\r\n                append: '@?',\r\n                backgroundColor: '@?',\r\n                cap: '@?',\r\n                foregroundColor: '@?',\r\n                label: '@?',\r\n                prepend: '@?',\r\n                size: '@?',\r\n                thick: '@?',\r\n                type: '@?',\r\n                value: '=?',\r\n                used: '=?',\r\n                total: '=?'\r\n\r\n            },\r\n            link: function (scope, element) {\r\n                var defaults = ngGauge.getOptions(); // fetching default settings from provider\r\n                console.log('default options = ', defaults);\r\n                scope.value = angular.isDefined(scope.value) ? scope.value : defaults.value;\r\n                scope.size = angular.isDefined(scope.size) ? scope.size : defaults.size;\r\n                scope.cap = angular.isDefined(scope.cap) ? scope.cap : defaults.cap;\r\n                scope.thick = angular.isDefined(scope.thick) ? scope.thick : defaults.thick;\r\n                scope.type = angular.isDefined(scope.type) ? scope.type : defaults.type;\r\n                scope.foregroundColor = angular.isDefined(scope.foregroundColor) ? scope.foregroundColor : defaults.foregroundColor;\r\n                scope.backgroundColor = angular.isDefined(scope.backgroundColor) ? scope.backgroundColor : defaults.backgroundColor;\r\n\r\n                console.log(defaults, scope);\r\n                var gauge = new Gauge(element, scope);\r\n\r\n                scope.$watch('value', watchData, false);\r\n                scope.$watch('used', watchData, false);\r\n                scope.$watch('total', watchData, false);\r\n                scope.$watch('cap', watchOther, false);\r\n                scope.$watch('thick', watchOther, false);\r\n                scope.$watch('type', watchOther, false);\r\n                scope.$watch('size', watchOther, false);\r\n                scope.$watch('foregroundColor', watchOther, false);\r\n                scope.$watch('backgroundColor', watchOther, false);\r\n\r\n                scope.$on('$destroy', function () { });\r\n                scope.$on('$resize', function () { });\r\n\r\n                function watchData(nv, ov) {\r\n                    if (!gauge) return;\r\n                    if (!nv || angular.equals(nv, ov)) return;\r\n                    gauge.update();\r\n                }\r\n\r\n                function watchOther(nv, ov) {\r\n                    if (!gauge) return;\r\n                    if (!nv || angular.equals(nv, ov)) return;\r\n                    gauge.destroy();\r\n                    gauge.init();\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n}(angular));"]}