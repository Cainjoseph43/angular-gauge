{"version":3,"sources":["angularjs-gauge.js"],"names":["angular","gaugeMeterProviderFn","defaultOptions","size","value","undefined","cap","thick","type","foregroundColor","backgroundColor","duration","this","setOptions","customOptions","isObject","Error","merge","ngGauge","getOptions","extend","$get","gaugeMeterDirective","tpl","Gauge","element","options","find","text","legend","unit","context","getContext","init","prototype","setupStyles","create","canvas","width","height","lineCap","lineWidth","lfs","llh","css","display","fontWeight","position","textAlign","overflow","textOverflow","fontSize","lineHeight","textDecoration","opacity","fs","lh","parseInt","animate","requestID","window","requestAnimationFrame","head","tail","beginPath","newPos","movePerFrame","arc","center","x","y","radius","strokeStyle","stroke","cancelAnimationFrame","getType","bounds","getBounds","msecs","getDuration","getCenter","getValue","getRadius","getForegroundColor","distance","drawShell","Math","PI","start","end","clear","clearRect","getWidth","getHeight","update","destroy","getThickness","val","used","total","getBackgroundColor","getLineCap","restrict","replace","template","scope","append","label","prepend","link","watchData","nv","ov","gauge","equals","watchOther","defaults","isDefined","$watch","$on","module","directive","provider","$inject"],"mappings":"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","file":"angularjs-gauge.min.js","sourcesContent":["(function (angular) {\r\n    'use strict';\r\n    angular\r\n        .module('angularjs-gauge', [])\r\n        .directive('ngGauge', gaugeMeterDirective)\r\n        .provider('ngGauge', gaugeMeterProviderFn);\r\n\r\n    gaugeMeterProviderFn.$inject = [];\r\n    function gaugeMeterProviderFn() {\r\n        var defaultOptions = {\r\n            size: 200,\r\n            value: undefined,\r\n            cap: 'butt',\r\n            thick: 2,\r\n            type: 'full',\r\n            foregroundColor: '#FFCC66',\r\n            backgroundColor: '#CCC',\r\n            duration: 1500\r\n        };\r\n\r\n        this.setOptions = function (customOptions) {\r\n            if (!(customOptions && angular.isObject(customOptions)))\r\n                throw new Error('Invalid option type specified in the ngGaugeProvider');\r\n            defaultOptions = angular.merge(defaultOptions, customOptions);\r\n        };\r\n\r\n        var ngGauge = {\r\n            getOptions: function () {\r\n                return angular.extend({}, defaultOptions);\r\n            }\r\n        };\r\n\r\n        this.$get = function () {\r\n            return ngGauge;\r\n\r\n        };\r\n\r\n    }\r\n\r\n    gaugeMeterDirective.$inject = ['ngGauge'];\r\n\r\n    function gaugeMeterDirective(ngGauge) {\r\n\r\n        var tpl = '<div style=\"display:inline-block;text-align:center;position:relative;\"><span><u>{{prepend}}</u>{{value}}<u>{{append}}</u></span><b>{{label}}</b><canvas></canvas></div>';\r\n\r\n        var Gauge = function (element, options) {\r\n            this.element = element.find('canvas')[0];\r\n            this.text = element.find('span');\r\n            this.legend = element.find('b');\r\n            this.unit = element.find('u');\r\n            this.context = this.element.getContext('2d');\r\n            this.options = options;\r\n            this.init();\r\n        };\r\n\r\n        Gauge.prototype = {\r\n\r\n            init: function () {\r\n                this.setupStyles();\r\n                this.create();\r\n            },\r\n\r\n            setupStyles: function () {\r\n\r\n                this.context.canvas.width = this.options.size;\r\n                this.context.canvas.height = this.options.size;\r\n                this.context.lineCap = this.options.cap;\r\n                this.context.lineWidth = this.options.thick;\r\n\r\n                var lfs = this.options.size * 0.22,\r\n                    llh = this.options.size;\r\n\r\n                this.text.css({\r\n                    display: 'inline-block',\r\n                    fontWeight: 100,\r\n                    width: '100%',\r\n                    position: 'absolute',\r\n                    textAlign: 'center',\r\n                    overflow: 'hidden',\r\n                    textOverflow: 'ellipsis',\r\n                    fontSize: lfs + 'px',\r\n                    lineHeight: llh + 'px'\r\n                });\r\n\r\n                this.unit.css({\r\n                    textDecoration: 'none',\r\n                    fontSize: '0.6em',\r\n                    fontWeight: 200,\r\n                    opacity: 0.8\r\n                });\r\n\r\n                var fs = this.options.size / 13;\r\n                var lh = (5 * fs) + parseInt(this.options.size);\r\n\r\n                this.legend.css({\r\n                    display: 'inline-block',\r\n                    width: '100%',\r\n                    position: 'absolute',\r\n                    textAlign: 'center',\r\n                    overflow: 'hidden',\r\n                    textOverflow: 'ellipsis',\r\n                    fontWeight: 200,\r\n                    fontSize: fs + 'px',\r\n                    lineHeight: lh + 'px'\r\n                });\r\n            },\r\n            create: function () {\r\n\r\n                var type = this.getType(),\r\n                    bounds = this.getBounds(type),\r\n                    msecs = this.getDuration(),\r\n                    movePerFrame = 40 / msecs,\r\n                    center = this.getCenter(),\r\n                    context = this.context,\r\n                    value = this.getValue(),\r\n                    radius = this.getRadius(),\r\n                    foregroundColor = this.getForegroundColor(),\r\n                    requestID,\r\n                    head = bounds.head,\r\n                    tail = bounds.tail,\r\n                    distance = tail - head;\r\n\r\n                this.drawShell(head, tail);\r\n                tail = head + (distance * value) / 100;\r\n\r\n                function animate() {\r\n                    requestID = window.requestAnimationFrame(animate);\r\n\r\n                    if (head <= tail) {\r\n                        context.beginPath();\r\n                        var newPos = head + 2 * movePerFrame;\r\n                        context.arc(center.x, center.y, radius, head, newPos, false);\r\n                        context.strokeStyle = foregroundColor;\r\n                        context.stroke();\r\n                        head = newPos;\r\n                    } else {\r\n                        cancelAnimationFrame(requestID);\r\n                    }\r\n                }\r\n                animate();\r\n            },\r\n\r\n            getBounds: function (type) {\r\n                var head, tail;\r\n                if (type == 'semi') {\r\n                    head = Math.PI;\r\n                    tail = 2 * Math.PI;\r\n                } else if (type == 'full') {\r\n                    head = 1.5 * Math.PI;\r\n                    tail = 3.5 * Math.PI;\r\n                } else if (type === 'arch') {\r\n                    head = 0.8 * Math.PI;\r\n                    tail = 2.2 * Math.PI;\r\n                }\r\n\r\n                return {\r\n                    head: head,\r\n                    tail: tail\r\n                };\r\n\r\n            },\r\n\r\n            drawShell: function (start, end) {\r\n                var context = this.context,\r\n                    center = this.getCenter(),\r\n                    radius = this.getRadius();\r\n                context.beginPath();\r\n                context.arc(center.x, center.y, radius, start, end, false);\r\n                context.strokeStyle = this.options.backgroundColor;\r\n                context.stroke();\r\n            },\r\n\r\n            clear: function () {\r\n                this.context.clearRect(0, 0, this.getWidth(), this.getHeight());\r\n            },\r\n\r\n            update: function () {\r\n                this.clear();\r\n                this.create();\r\n            },\r\n\r\n            destroy: function () {\r\n                this.clear();\r\n            },\r\n\r\n            getRadius: function () {\r\n                var center = this.getCenter();\r\n                return center.x - this.getThickness();\r\n            },\r\n\r\n            getCenter: function () {\r\n                var x = this.getWidth() / 2,\r\n                    y = this.getHeight() / 2;\r\n                return {\r\n                    x: x,\r\n                    y: y\r\n                };\r\n            },\r\n\r\n            getValue: function () {\r\n                var val = 0;\r\n                if (this.options.used && this.options.total) {\r\n                    val = (this.options.used / this.options.total) * 100;\r\n                    this.options.value = this.options.used;\r\n                } else {\r\n                    val = this.options.value;\r\n                }\r\n                return val;\r\n\r\n            },\r\n            getWidth: function () {\r\n                return this.context.canvas.width;\r\n            },\r\n\r\n            getHeight: function () {\r\n                return this.context.canvas.height;\r\n            },\r\n\r\n            getThickness: function () {\r\n                return this.options.thick;\r\n            },\r\n\r\n            getBackgroundColor: function () {\r\n                return this.options.backgroundColor;\r\n            },\r\n\r\n            getForegroundColor: function () {\r\n                return this.options.foregroundColor;\r\n            },\r\n\r\n            getLineCap: function () {\r\n                return this.options.cap;\r\n            },\r\n\r\n            getType: function () {\r\n                return this.options.type;\r\n            },\r\n\r\n            getDuration: function () {\r\n              return this.options.duration;\r\n            }\r\n\r\n        };\r\n\r\n\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            template: tpl,\r\n            scope: {\r\n                append: '@?',\r\n                backgroundColor: '@?',\r\n                cap: '@?',\r\n                foregroundColor: '@?',\r\n                label: '@?',\r\n                prepend: '@?',\r\n                size: '@?',\r\n                thick: '@?',\r\n                type: '@?',\r\n                duration: '@?',\r\n                value: '=?',\r\n                used: '=?',\r\n                total: '=?'\r\n\r\n            },\r\n            link: function (scope, element) {\r\n                var defaults = ngGauge.getOptions(); // fetching default settings from provider\r\n                scope.value = angular.isDefined(scope.value) ? scope.value : defaults.value;\r\n                scope.size = angular.isDefined(scope.size) ? scope.size : defaults.size;\r\n                scope.cap = angular.isDefined(scope.cap) ? scope.cap : defaults.cap;\r\n                scope.thick = angular.isDefined(scope.thick) ? scope.thick : defaults.thick;\r\n                scope.type = angular.isDefined(scope.type) ? scope.type : defaults.type;\r\n                scope.duration = angular.isDefined(scope.duration) ? scope.duration : defaults.duration;\r\n                scope.foregroundColor = angular.isDefined(scope.foregroundColor) ? scope.foregroundColor : defaults.foregroundColor;\r\n                scope.backgroundColor = angular.isDefined(scope.backgroundColor) ? scope.backgroundColor : defaults.backgroundColor;\r\n\r\n                var gauge = new Gauge(element, scope);\r\n\r\n                scope.$watch('value', watchData, false);\r\n                scope.$watch('used', watchData, false);\r\n                scope.$watch('total', watchData, false);\r\n                scope.$watch('cap', watchOther, false);\r\n                scope.$watch('thick', watchOther, false);\r\n                scope.$watch('type', watchOther, false);\r\n                scope.$watch('size', watchOther, false);\r\n                scope.$watch('duration', watchOther, false);\r\n                scope.$watch('foregroundColor', watchOther, false);\r\n                scope.$watch('backgroundColor', watchOther, false);\r\n\r\n                scope.$on('$destroy', function () { });\r\n                scope.$on('$resize', function () { });\r\n\r\n                function watchData(nv, ov) {\r\n                    if (!gauge) return;\r\n                    if (!nv || angular.equals(nv, ov)) return;\r\n                    gauge.update();\r\n                }\r\n\r\n                function watchOther(nv, ov) {\r\n                    if (!gauge) return;\r\n                    if (!nv || angular.equals(nv, ov)) return;\r\n                    gauge.destroy();\r\n                    gauge.init();\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n}(angular));\r\n"]}